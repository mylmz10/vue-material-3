// Thanks https://github.com/material-components/material-web/
@use 'sass:map';
@use 'sass:string';

$_key-opacity: 0.3;
$_ambient-opacity: 0.15;
$_shadow-map: (
  0: (
    key: '0px 0px 0px 0px',
    ambient: '0px 0px 0px 0px',
  ),
  1: (
    key: '0px 1px 2px 0px',
    ambient: '0px 1px 3px 1px',
  ),
  2: (
    key: '0px 1px 2px 0px',
    ambient: '0px 2px 6px 2px',
  ),
  3: (
    key: '0px 1px 3px 0px',
    ambient: '0px 4px 8px 3px',
  ),
  4: (
    key: '0px 2px 3px 0px',
    ambient: '0px 6px 10px 4px',
  ),
  5: (
    key: '0px 4px 4px 0px',
    ambient: '0px 8px 12px 6px',
  ),
);

/// Maps elevation dps to elevation levels.
$_dp-to-level-map: (
  // TODO: pull the keys from tokens
  0: 0,
  1: 1,
  3: 2,
  6: 3,
  8: 4,
  12: 5
);

/// Returns the appropriate elevation level for a given dp.
///
/// @throw If the provided dp does not map to an elevation level.
/// @param {Number} $dp - The dp to convert to an elevation level.
/// @return {Number} The level of the elevation system, or null if the dp is
///     null.
@function _resolve-dp($dp) {
  @if $dp == null {
    @return null;
  }

  $level: map.get($_dp-to-level-map, $dp);
  @if $level == null {
    @error '#{$dp} is not a valid elevation dp level. Must be one of #{map.keys($_dp-to-level-map)}.';
  }

  @return $level;
}

@function is-var($string) {
  @if (str-index(string.quote($string), 'var(')) {
    @return true;
  } @else {
    @return false;
  }
}

@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

// Trims the start/left of the string:
@function str-trimStart($str) {
  @if (str-slice($str, 1, 1) == ' ') {
    @return str-trimStart(str-slice($str, 2));
  } @else {
    @return $str;
  }
}

// Trims the end/right of the string:
@function str-trimEnd($str) {
  @if (str-slice($str, str-length($str), -1) == ' ') {
    @return str-trimEnd(str-slice($str, 1, -2));
  } @else {
    @return $str;
  }
}

// Trims both the start and end of the string:
@function str-trim($str) {
  @return str-trimStart(str-trimEnd($str));
}

@function get-var-fallback($var) {
  $var: string.quote($var);
  $var: str-replace($var, 'var(');
  $var: str-replace($var, ')');
  $indexStart: str-index($var, '--');
  $indexEnd: str-index($var, ',');
  @return unquote(str-trim(str-replace($var, str-slice($var, $indexStart, $indexEnd))));
}

@function hex-to-dec($string) {
  $hex: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9' 'a' 'b' 'c' 'd' 'e' 'f';
  $string: to-lower-case($string);
  $length: str-length($string);

  $dec: 0;
  @for $i from 1 through $length {
    $factor: 1 + (15 * ($length - $i));
    $index: index($hex, str-slice($string, $i, $i));
    $dec: $dec + $factor * ($index - 1);
  }

  @return $dec;
}

@function hex-to-color($string, $opacity: 1) {
  @return rgba(hex-to-dec(str-slice($string, 1, 2)), hex-to-dec(str-slice($string, 3, 4)), hex-to-dec(str-slice($string, 5, 6)), $opacity);
}

@function color-var-hex-to-rgba($var, $opacity: 1) {
  $hexColor: get-var-fallback($var);

  @if str-length($hexColor) == 4 {
    $first: str-slice($hexColor, 2, 2);
    $second: str-slice($hexColor, 3, 3);
    $third: str-slice($hexColor, 4, 4);
    $hexColor: unquote('#{$first}#{$first}#{$second}#{$second}#{$third}#{$third}');
  }
  @if str-length($hexColor) == 7 {
    $hexColor: unquote(str-replace($hexColor, '#', ''));
  }

  @return hex-to-color($hexColor, $opacity);
}

//@debug color-var-hex-to-rgba(var(--md-sys-color-primary, #6750a4));
//@debug color-var-hex-to-rgba(var(--md-sys-color-primary, #000));

/// Returns the appropriate box-shadow for the given level and shadow color.
///
/// @throw If level or shadow-color are provided and one is null.
/// @param {Number} $level - The level of the elevation system.
/// @param {Color} $shadow-color - The color of the shadow.
/// @return {List|String} - The constructed box-shadow, none (for elevation 0),
///     or null
@function resolve-box-shadow($dp, $shadow-color) {
  $level: _resolve-dp($dp);
  @if $level == null and $shadow-color == null {
    @return null;
  }

  @if $level == 0 {
    @return none;
  }

  @if $level == null {
    @error '$elevation is required when $shadow-color is provided';
  }

  @if $shadow-color == null {
    @error '$shadow-color is required when $elevation is provided';
  }

  $key-spread: map.get($_shadow-map, $level, key);
  $ambient-spread: map.get($_shadow-map, $level, ambient);

  $key-color: rgba($shadow-color, $_key-opacity);
  $ambient-color: rgba($shadow-color, $_ambient-opacity);

  @if is-var($shadow-color) {
    $key-color: color-var-hex-to-rgba($shadow-color, $_key-opacity);
    $ambient-color: color-var-hex-to-rgba($shadow-color, $_ambient-opacity);
  }

  @return (#{$key-spread} #{$key-color}, #{$ambient-spread} #{$ambient-color});
}
